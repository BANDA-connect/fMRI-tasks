#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
This experiment was created using PsychoPy2 Experiment Builder (v1.82.02), Sat Jan  9 02:16:18 2016
If you publish work using this script please cite the relevant PsychoPy publications
  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.
  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008
"""

from __future__ import division  # so that 1/3=0.333 instead of 1/3=0
from psychopy import visual, core, data, event, logging, gui
from psychopy.constants import *  # things like STARTED, FINISHED
import numpy as np  # whole numpy lib is available, prepend 'np.'
from numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray
from numpy.random import random, randint, normal, shuffle
import os  # handy system and path functions


# Python version = 2.7.2
# Platform = Win32
import random
import itertools
from itertools import groupby
import os
import csv


# Ensure that relative paths start from the same directory as this script
_thisDir = os.path.dirname(os.path.abspath(__file__))
os.chdir(_thisDir)

# Store info about the experiment session
expName = 'FaceMatching_BANDA'  # from the Builder filename that created this script
expInfo = {'participant':'', 'session':'', 'run':'A'}
dlg = gui.DlgFromDict(dictionary=expInfo, title=expName)
if dlg.OK == False: core.quit()  # user pressed cancel
expInfo['date'] = data.getDateStr()  # add a simple timestamp
expInfo['expName'] = expName

# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc
filename = 'data/'+expInfo['participant']+ os.path.sep + '%s_%s_%s_%s_%s' %(expInfo['participant'],expInfo['session'],expInfo['run'],expName,expInfo['date'])


#Trials pseudorandomization

if expInfo['run']=='A':
    blocks=['block_A_happy_1.csv',
        'block_A_fear_1.csv',
        'block_A_neutral_1.csv',
        'block_A_objects_1.csv',
        'block_fixation.csv']

    random.shuffle(blocks)
    blocks1=blocks
    blocks2 = [x.replace('_1','_2') for x in blocks]
    blocks3 = [x.replace('_1','_3') for x in blocks]

    with open('all_blocks_list_3xA.csv', 'wb') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames = ["trial_blocks"])
            writer.writeheader()
            for i in blocks1:
                print>>csvfile, i
            
            for i in blocks2:
                print>>csvfile, i
            
            for i in blocks3:
                print>>csvfile, i
else :
    blocks=['block_B_happy_1.csv',
        'block_B_fear_1.csv',
        'block_B_neutral_1.csv',
        'block_B_objects_1.csv',
        'block_fixation.csv']

    random.shuffle(blocks)
    blocks1=blocks
    blocks2 = [x.replace('_1','_2') for x in blocks]
    blocks3 = [x.replace('_1','_3') for x in blocks]

    with open('all_blocks_list_3xB.csv', 'wb') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames = ["trial_blocks"])
            writer.writeheader()
            for i in blocks1:
                print>>csvfile, i
            
            for i in blocks2:
                print>>csvfile, i
            
            for i in blocks3:
                print>>csvfile, i

            





# An ExperimentHandler isn't essential but helps with data saving
thisExp = data.ExperimentHandler(name=expName, version='',
    extraInfo=expInfo, runtimeInfo=None,
    originPath=None,
    savePickle=True, saveWideText=True,
    dataFileName=filename)
#save a log file for detail verbose info
logFile = logging.LogFile(filename+'.log', level=logging.EXP)
logging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file

endExpNow = False  # flag for 'escape' or other condition => quit the exp

# Start Code - component code to be run before the window creation

# Setup the Window
win = visual.Window(size=(800, 600), fullscr=True, screen=0, allowGUI=False, allowStencil=False,
    monitor='testMonitor', color=[0,0,0], colorSpace='rgb',
    blendMode='avg', useFBO=True,
    )
# store frame rate of monitor if we can measure it successfully
expInfo['frameRate']=win.getActualFrameRate()
if expInfo['frameRate']!=None:
    frameDur = 1.0/round(expInfo['frameRate'])
else:
    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess

# Initialize components for Routine "instructions"
instructionsClock = core.Clock()
instructions_test = visual.TextStim(win=win, ori=0, name='instructions_test',
    text=u'Instructions:\n\nFind which bottom picture matches the top one.Pictures can be faces, fruits or vegetables.\n\nPress any button to continue.',    font=u'Arial',
    pos=[0, 0], height=0.1, wrapWidth=1.5,
    color=u'white', colorSpace='rgb', opacity=1,
    depth=0.0)
instructions_text_pressI = visual.TextStim(win=win, ori=0, name='instructions_test',
    text=u'If the bottom left matches, press the index finger button (press it now!).',    font=u'Arial',
    pos=[0, 0], height=0.1, wrapWidth=1.5,
    color=u'white', colorSpace='rgb', opacity=1,
    depth=0.0)
instructions_text_pressM = visual.TextStim(win=win, ori=0, name='instructions_test',
    text=u'If the bottom right matches, press the middle finger button (press it now!).',    font=u'Arial',
    pos=[0, 0], height=0.1, wrapWidth=1.5,
    color=u'white', colorSpace='rgb', opacity=1,
    depth=0.0)

# Initialize components for Routine "trigger"
triggerClock = core.Clock()
trigger_text = visual.TextStim(win=win, ori=0, name='trigger_text',
    text='waiting for machine...',    font='Arial',
    pos=[0, 0], height=0.1, wrapWidth=None,
    color='white', colorSpace='rgb', opacity=1,
    depth=0.0)

# Initialize components for Routine "happy_1"
happy_1Clock = core.Clock()
top = visual.ImageStim(win=win, name='top',
    image='sin', mask=None,
    ori=0, pos=[0, 0.4], size=[0.25, 0.5],
    color=[1,1,1], colorSpace='rgb', opacity=1,
    flipHoriz=False, flipVert=False,
    texRes=128, interpolate=True, depth=0.0)
left = visual.ImageStim(win=win, name='left',
    image='sin', mask=None,
    ori=0, pos=[-0.3, -0.2], size=[0.25, 0.5],
    color=[1,1,1], colorSpace='rgb', opacity=1,
    flipHoriz=False, flipVert=False,
    texRes=128, interpolate=True, depth=-1.0)
right = visual.ImageStim(win=win, name='right',
    image='sin', mask=None,
    ori=0, pos=[0.3, -0.2], size=[0.25, 0.5],
    color=[1,1,1], colorSpace='rgb', opacity=1,
    flipHoriz=False, flipVert=False,
    texRes=128, interpolate=True, depth=-2.0)


# Initialize components for Routine "fixation"
fixationClock = core.Clock()
fixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',
    text=u'+',    font=u'Arial',
    pos=[0, 0], height=0.15, wrapWidth=None,
    color=u'white', colorSpace='rgb', opacity=1,
    depth=0.0)

# Initialize components for Routine "thanks"
thanksClock = core.Clock()
thanks_text = visual.TextStim(win=win, ori=0, name='thanks_text',
    text=u'Thanks!!',    font=u'Arial',
    pos=[0, 0], height=0.15, wrapWidth=None,
    color=u'white', colorSpace='rgb', opacity=1,
    depth=0.0)

# Create some handy timers
globalClock = core.Clock()  # to track the time since experiment started
routineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine 

#------Prepare to start Routine "instructions"-------
t = 0
instructionsClock.reset()  # clock 
frameN = -1
# update component parameters for each repeat
instruction_key_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse
instruction_key_resp.status = NOT_STARTED
# keep track of which components have finished
instructionsComponents = []
instructionsComponents.append(instructions_test)
instructionsComponents.append(instruction_key_resp)
for thisComponent in instructionsComponents:
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED

#-------Start Routine "instructions"-------
continueRoutine = True
while continueRoutine:
    # get current time
    t = instructionsClock.getTime()
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *instructions_test* updates
    if t >= 0.0 and instructions_test.status == NOT_STARTED:
        # keep track of start time/frame for later
        instructions_test.tStart = t  # underestimates by a little under one frame
        instructions_test.frameNStart = frameN  # exact frame index
        instructions_test.setAutoDraw(True)
    
    # *instruction_key_resp* updates
    if t >= 0.0 and instruction_key_resp.status == NOT_STARTED:
        # keep track of start time/frame for later
        instruction_key_resp.tStart = t  # underestimates by a little under one frame
        instruction_key_resp.frameNStart = frameN  # exact frame index
        instruction_key_resp.status = STARTED
        # keyboard checking is just starting
        instruction_key_resp.clock.reset()  # now t=0
        event.clearEvents(eventType='keyboard')
    if instruction_key_resp.status == STARTED:
        theseKeys = event.getKeys(keyList=['1', '2','3','4','5','0', 'space'])
        
        # check for quit:
        if "escape" in theseKeys:
            endExpNow = True
        if len(theseKeys) > 0:  # at least one key was pressed
            instruction_key_resp.keys = theseKeys[-1]  # just the last key pressed
            instruction_key_resp.rt = instruction_key_resp.clock.getTime()
            # a response ends the routine
            continueRoutine = False
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in instructionsComponents:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # check for quit (the Esc key)
    if endExpNow or event.getKeys(keyList=["escape"]):
        core.quit()
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

#-------Ending Routine "instructions"-------
for thisComponent in instructionsComponents:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
# check responses
if instruction_key_resp.keys in ['', [], None]:  # No response was made
   instruction_key_resp.keys=None
# store data for thisExp (ExperimentHandler)
thisExp.addData('instruction_key_resp.keys',instruction_key_resp.keys)
if instruction_key_resp.keys != None:  # we had a response
    thisExp.addData('instruction_key_resp.rt', instruction_key_resp.rt)
instructions_text_pressI.draw()
win.flip()
event.waitKeys(keyList=["1"])


instructions_text_pressM.draw()
win.flip()
event.waitKeys(keyList=["2"])


thisExp.nextEntry()
# the Routine "instructions" was not non-slip safe, so reset the non-slip timer
routineTimer.reset()

#------Prepare to start Routine "trigger"-------
t = 0
triggerClock.reset()  # clock 
frameN = -1
# update component parameters for each repeat
key_resp_2 = event.BuilderKeyResponse()  # create an object of type KeyResponse
key_resp_2.status = NOT_STARTED
# keep track of which components have finished
triggerComponents = []
triggerComponents.append(trigger_text)
triggerComponents.append(key_resp_2)
for thisComponent in triggerComponents:
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED

#-------Start Routine "trigger"-------
continueRoutine = True
while continueRoutine:
    # get current time
    t = triggerClock.getTime()
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *trigger_text* updates
    if t >= 0.0 and trigger_text.status == NOT_STARTED:
        # keep track of start time/frame for later
        trigger_text.tStart = t  # underestimates by a little under one frame
        trigger_text.frameNStart = frameN  # exact frame index
        trigger_text.setAutoDraw(True)
    
    # *key_resp_2* updates
    if t >= 0.0 and key_resp_2.status == NOT_STARTED:
        # keep track of start time/frame for later
        key_resp_2.tStart = t  # underestimates by a little under one frame
        key_resp_2.frameNStart = frameN  # exact frame index
        key_resp_2.status = STARTED
        # keyboard checking is just starting
        key_resp_2.clock.reset()  # now t=0
        event.clearEvents(eventType='keyboard')
    if key_resp_2.status == STARTED:
        theseKeys = event.getKeys(keyList=['t', 'num_add','num_equal','+','=','equal','plus'])
        
        # check for quit:
        if "escape" in theseKeys:
            endExpNow = True
        if len(theseKeys) > 0:  # at least one key was pressed
            key_resp_2.keys = theseKeys[-1]  # just the last key pressed
            key_resp_2.rt = key_resp_2.clock.getTime()
            # a response ends the routine
            continueRoutine = False
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in triggerComponents:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # check for quit (the Esc key)
    if endExpNow or event.getKeys(keyList=["escape"]):
        core.quit()
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

#-------Ending Routine "trigger"-------
for thisComponent in triggerComponents:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
# check responses
if key_resp_2.keys in ['', [], None]:  # No response was made
   key_resp_2.keys=None
# store data for thisExp (ExperimentHandler)
thisExp.addData('key_resp_2.keys',key_resp_2.keys)
if key_resp_2.keys != None:  # we had a response
    thisExp.addData('key_resp_2.rt', key_resp_2.rt)
thisExp.nextEntry()
# the Routine "trigger" was not non-slip safe, so reset the non-slip timer
routineTimer.reset()

# set up handler to look after randomisation of conditions etc
blocks = data.TrialHandler(nReps=1, method='sequential', 
    extraInfo=expInfo, originPath=None,
    trialList=data.importConditions(u'all_blocks_list_3x'+expInfo['run']+'.csv'),
    seed=None, name='blocks')
thisExp.addLoop(blocks)  # add the loop to the experiment
thisBlock = blocks.trialList[0]  # so we can initialise stimuli with some values
# abbreviate parameter names if possible (e.g. rgb=thisBlock.rgb)
if thisBlock != None:
    for paramName in thisBlock.keys():
        exec(paramName + '= thisBlock.' + paramName)

for thisBlock in blocks:
    currentLoop = blocks
    # abbreviate parameter names if possible (e.g. rgb = thisBlock.rgb)
    if thisBlock != None:
        for paramName in thisBlock.keys():
            exec(paramName + '= thisBlock.' + paramName)
    
    # set up handler to look after randomisation of conditions etc
    trials = data.TrialHandler(nReps=1, method='sequential', 
        extraInfo=expInfo, originPath=None,
        trialList=data.importConditions(trial_blocks),
        seed=None, name='trials')
    thisExp.addLoop(trials)  # add the loop to the experiment
    thisTrial = trials.trialList[0]  # so we can initialise stimuli with some values
    # abbreviate parameter names if possible (e.g. rgb=thisTrial.rgb)
    
    if thisTrial != None:
        for paramName in thisTrial.keys():
            exec(paramName + '= thisTrial.' + paramName)
            
    for thisTrial in trials:
        currentLoop = trials
        # abbreviate parameter names if possible (e.g. rgb = thisTrial.rgb)
        if thisTrial != None:
            for paramName in thisTrial.keys():
                exec(paramName + '= thisTrial.' + paramName)
                
        
        
      
   
        #------Prepare to start Routine "happy_1"-------
        t = 0
        happy_1Clock.reset()  # clock 
        frameN = -1
        routineTimer.add(3.000000)
        # update component parameters for each repeat
        top.setImage(top_image)
        left.setImage(left_image)
        right.setImage(right_image)
        key_resp_trial = event.BuilderKeyResponse()  # create an object of type KeyResponse
        key_resp_trial.status = NOT_STARTED
        # keep track of which components have finished
        happy_1Components = []
        happy_1Components.append(top)
        happy_1Components.append(left)
        happy_1Components.append(right)
        happy_1Components.append(key_resp_trial)
        for thisComponent in happy_1Components:
            if hasattr(thisComponent, 'status'):
                thisComponent.status = NOT_STARTED
        
        
        if 'fixation' in top.image:
            print "this roung is fixation" ,top.image
            
            #------Prepare to start Routine "fixation"-------
            t = 0
            fixationClock.reset()  # clock 
            frameN = -1
            routineTimer.add(3.000000)
            # update component parameters for each repeat
            # keep track of which components have finished
            fixationComponents = []
            fixationComponents.append(fixation_text)
            for thisComponent in fixationComponents:
                if hasattr(thisComponent, 'status'):
                    thisComponent.status = NOT_STARTED

            #-------Start Routine "fixation"-------
            continueRoutine = True
            while continueRoutine and routineTimer.getTime() > 0:
                # get current time
                t = fixationClock.getTime()
                frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
                # update/draw components on each frame
                
                # *fixation_text* updates
                if t >= 0.0 and fixation_text.status == NOT_STARTED:
                    # keep track of start time/frame for later
                    fixation_text.tStart = t  # underestimates by a little under one frame
                    fixation_text.frameNStart = frameN  # exact frame index
                    fixation_text.setAutoDraw(True)
                if fixation_text.status == STARTED and t >= (0.0 + (3-win.monitorFramePeriod*0.75)): #most of one frame period left
                    fixation_text.setAutoDraw(False)
                
                # check if all components have finished
                if not continueRoutine:  # a component has requested a forced-end of Routine
                    break
                continueRoutine = False  # will revert to True if at least one component still running
                for thisComponent in fixationComponents:
                    if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                        continueRoutine = True
                        break  # at least one component has not yet finished
                
                # check for quit (the Esc key)
                if endExpNow or event.getKeys(keyList=["escape"]):
                    core.quit()
                
                # refresh the screen
                if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
                    win.flip()

            #-------Ending Routine "fixation"-------
            for thisComponent in fixationComponents:
                if hasattr(thisComponent, "setAutoDraw"):
                    thisComponent.setAutoDraw(False)
        else:
            print "image ",top.image
            
            #-------Start Routine "happy_1"-------
            continueRoutine = True
	    allPressedKeys=[]
	    allPressedKeysTime=[]
            while continueRoutine and routineTimer.getTime() > 0:
                # get current time
                t = happy_1Clock.getTime()
                frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
                # update/draw components on each frame
                
                # *top* updates
                if t >= 0 and top.status == NOT_STARTED:
                    # keep track of start time/frame for later
                    top.tStart = t  # underestimates by a little under one frame
                    top.frameNStart = frameN  # exact frame index
                    top.setAutoDraw(True)
                if top.status == STARTED and t >= (0 + (3-win.monitorFramePeriod*0.75)): #most of one frame period left
                    top.setAutoDraw(False)
                
                # *left* updates
                if t >= 0 and left.status == NOT_STARTED:
                    # keep track of start time/frame for later
                    left.tStart = t  # underestimates by a little under one frame
                    left.frameNStart = frameN  # exact frame index
                    left.setAutoDraw(True)
                if left.status == STARTED and t >= (0 + (3-win.monitorFramePeriod*0.75)): #most of one frame period left
                    left.setAutoDraw(False)
                
                # *right* updates
                if t >= 0 and right.status == NOT_STARTED:
                    # keep track of start time/frame for later
                    right.tStart = t  # underestimates by a little under one frame
                    right.frameNStart = frameN  # exact frame index
                    right.setAutoDraw(True)
                if right.status == STARTED and t >= (0 + (3-win.monitorFramePeriod*0.75)): #most of one frame period left
                    right.setAutoDraw(False)
                
                # *key_resp_trial* updates
                if t >= 0.0 and key_resp_trial.status == NOT_STARTED:
                    # keep track of start time/frame for later
                    key_resp_trial.tStart = t  # underestimates by a little under one frame
                    key_resp_trial.frameNStart = frameN  # exact frame index
                    key_resp_trial.status = STARTED
                    # keyboard checking is just starting
                    key_resp_trial.clock.reset()  # now t=0
                    event.clearEvents(eventType='keyboard')
                if key_resp_trial.status == STARTED and t >= (0.0 + (3-win.monitorFramePeriod*0.75)): #most of one frame period left
                    key_resp_trial.status = STOPPED
                if key_resp_trial.status == STARTED:
                    theseKeys = event.getKeys(keyList=['1', '2'])
                    
                    # check for quit:
                    if "escape" in theseKeys:
                        endExpNow = True
                    if len(theseKeys) > 0:  # at least one key was pressed
                        key_resp_trial.keys = theseKeys[-1]  # just the last key pressed
                        key_resp_trial.rt = key_resp_trial.clock.getTime()
                        # was this 'correct'?
                        if (key_resp_trial.keys == str(corr_ans)) or (key_resp_trial.keys == corr_ans):
                            key_resp_trial.corr = 1
                        else:
                            key_resp_trial.corr = 0
		    	for k in theseKeys:
				allPressedKeys.append(k)
				allPressedKeysTime.append(key_resp_trial.clock.getTime())
              
	
                # check if all components have finished
                if not continueRoutine:  # a component has requested a forced-end of Routine
                    break
                continueRoutine = False  # will revert to True if at least one component still running
                for thisComponent in happy_1Components:
                    if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                        continueRoutine = True
                        break  # at least one component has not yet finished
                
                # check for quit (the Esc key)
                if endExpNow or event.getKeys(keyList=["escape"]):
                    core.quit()
                
                # refresh the screen
                if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
                    win.flip()
            
            #-------Ending Routine "happy_1"-------
            for thisComponent in happy_1Components:
                if hasattr(thisComponent, "setAutoDraw"):
                    thisComponent.setAutoDraw(False)
            # check responses
            if key_resp_trial.keys in ['', [], None]:  # No response was made
               key_resp_trial.keys=None
               # was no response the correct answer?!
               if str(corr_ans).lower() == 'none': key_resp_trial.corr = 1  # correct non-response
               else: key_resp_trial.corr = 0  # failed to respond (incorrectly)
            # store data for trials (TrialHandler)
            trials.addData('key_resp_trial.keys',key_resp_trial.keys)
            trials.addData('key_resp_trial.corr', key_resp_trial.corr)
            if key_resp_trial.keys != None:  # we had a response
                trials.addData('key_resp_trial.rt', key_resp_trial.rt)
	    trials.addData("allPressedKeys", str(allPressedKeys).replace(",",":"))
	    trials.addData("allPressedKeysTime", str(allPressedKeysTime).replace(",",":"))
            thisExp.nextEntry()
        
    # completed 1 repeats of 'trials'
        
    thisExp.nextEntry()
     


#------Prepare to start Routine "thanks"-------
t = 0
thanksClock.reset()  # clock 
frameN = -1
routineTimer.add(3.000000)
# update component parameters for each repeat
# keep track of which components have finished
thanksComponents = []
thanksComponents.append(thanks_text)
for thisComponent in thanksComponents:
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED

#-------Start Routine "thanks"-------
continueRoutine = True
while continueRoutine and routineTimer.getTime() > 0:
    # get current time
    t = thanksClock.getTime()
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *thanks_text* updates
    if t >= 0.0 and thanks_text.status == NOT_STARTED:
        # keep track of start time/frame for later
        thanks_text.tStart = t  # underestimates by a little under one frame
        thanks_text.frameNStart = frameN  # exact frame index
        thanks_text.setAutoDraw(True)
    if thanks_text.status == STARTED and t >= (0.0 + (3-win.monitorFramePeriod*0.75)): #most of one frame period left
        thanks_text.setAutoDraw(False)
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in thanksComponents:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # check for quit (the Esc key)
    if endExpNow or event.getKeys(keyList=["escape"]):
        core.quit()
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

#-------Ending Routine "thanks"-------
for thisComponent in thanksComponents:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
win.close()
core.quit()
